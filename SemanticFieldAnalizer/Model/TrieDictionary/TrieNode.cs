//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó mediante una herramienta.
//     Los cambios del archivo se perderán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

public class TrieNode : ITrieNode
{
    private int _childrenCount { get; set; }
	private ITrieNode _parent
	{
		get;
		set;
	}


    /// <summary>
    /// La estructura será cuando haya un valor nodo no null en los indices ser considerará:
    /// 0->a
    /// 1->b
    /// 2->c
    /// 3->d
    /// 4->e
    /// 5->f
    /// 6->g
    /// 7->h
    /// 8->i
    /// 9->j
    /// 10->k
    /// 11->l
    /// 12->m
    /// 13->n
    /// 14->ñ
    /// 15->o
    /// 16->p
    /// 17->q
    /// 18->r
    /// 19->s
    /// 20->t
    /// 21->u
    /// 22->v
    /// 23->w
    /// 24->x
    /// 25->y
    /// 26->z
    /// 27->SIN ASIGNAR
    /// 28->SIN ASIGNAR
    /// 29->SIN ASIGNAR
    /// 30->Terminación de palabra
    /// </summary>
    /// 
    private ITrieNode[] _children
	{
		get;
		set;
	}

    public TrieNode(ITrieNode parent) {
        _parent = parent;
        _childrenCount = 0;
    }

	public int asign(char c, ITrieNode node)
	{        
        switch (c) {
            case 'a':
                _children[0] = node; break;
            case 'b':
                _children[1] = node; break;
            case 'c':
                _children[2] = node; break;
            case 'd':
                _children[3] = node; break;
            case 'e':
                _children[4] = node; break;
            case 'f':
                _children[5] = node; break;
            case 'g':
                _children[6] = node; break;
            case 'h':
                _children[7] = node; break;
            case 'i':
                _children[8] = node; break;
            case 'j':
                _children[9] = node; break;
            case 'k':
                _children[10] = node; break;
            case 'l':
                _children[11] = node; break;
            case 'm':
                _children[12] = node; break;
            case 'n':
                _children[13] = node; break;
            case 'ñ':
                _children[14] = node; break;
            case 'o':
                _children[15] = node; break;
            case 'p':
                _children[16] = node; break;
            case 'q':
                _children[17] = node; break;
            case 'r':
                _children[18] = node; break;
            case 's':
                _children[19] = node; break;
            case 't':
                _children[20] = node; break;
            case 'u':
                _children[21] = node; break;
            case 'v':
                _children[22] = node; break;
            case 'w':
                _children[23] = node; break;
            case 'x':
                _children[24] = node; break;
            case 'y':
                _children[25] = node; break;
            case 'z':
                _children[26] = node; break;
            default:
                return 0;
        }
        return 1;
    }

    public ITrieNode getParent() {
        return _parent;
    }

	public ITrieNode value(char c)
	{
        switch (c)
        {
            case 'a':
                return _children[0];
            case 'á':
                return _children[0];
            case 'b':
                return _children[1];
            case 'c':
                return _children[2];
            case 'd':
                return _children[3];
            case 'e':
                return _children[4];
            case 'é':
                return _children[4];
            case 'f':
                return _children[5];
            case 'g':
                return _children[6];
            case 'h':
                return _children[7];
            case 'i':
                return _children[8];
            case 'í':
                return _children[8];
            case 'j':
                return _children[9];
            case 'k':
                return _children[10];
            case 'l':
                return _children[11];
            case 'm':
                return _children[12];
            case 'n':
                return _children[13];
            case 'ñ':
                return _children[14];
            case 'o':
                return _children[15];
            case 'ó':
                return _children[15];
            case 'p':
                return _children[16];
            case 'q':
                return _children[17];
            case 'r':
                return _children[18];
            case 's':
                return _children[19];
            case 't':
                return _children[20];
            case 'u':
                return _children[21];
            case 'ú':
                return _children[21];
            case 'v':
                return _children[22];
            case 'w':
                return _children[23];
            case 'x':
                return _children[24];
            case 'y':
                return _children[25];
            case 'z':
                return _children[26];
            default:
                return null;
        }
    }

    public int getChildrenCount() {
        int count = 0;
        for (int i = 0; i < 29; i++)
            if (_children[i] != null) count++;
        return count;
    }

    public int terminate()
    {
        if (_children[30] != null) {
            return 0;
        }
        _children[30] = new TrieNode(this);
        return 1;
    }

    public int isTerminated()
    {
        if (_children[30] != null) return 1;
        else return 0;
    }
}

