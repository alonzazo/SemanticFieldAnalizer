//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó mediante una herramienta.
//     Los cambios del archivo se perderán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Linq;
using System.Text;

public class TrieDictionaryEnumerator : IEnumerator
{
    
    private int _index = 0;
    private string _currentWord = "";
    private ITrieNode _currentNode;
    private ITrieNode _initialNode;

    public TrieDictionaryEnumerator(ITrieNode initialNode) {
        _initialNode = initialNode;
        Reset();
    }

    object IEnumerator.Current{
       
        get {
            return Current;
        }
    }

    public string Current {
        get {
            return _currentWord;
        }
    }
    public void Reset() {
        _index = 0;
        _currentNode = _initialNode;
    }

    public bool MoveNext()
    {
        //Verificamos si estamos en el inicio del árbol y cuál es el último cáracter recorrido
        if (0 == _currentWord.Length)               //Si sí, empezamos desde el inicio
        {
            _currentNode = MoveNextAux(_currentNode);
            return true;
        }
        else {                                      //Si no avanzamos a partir del último carácter leído
            if (_currentNode != null)
            {
                if (_currentNode.getChildrenCount() > 0)
                {
                    for (int i = charToNum(_currentWord[_currentWord.Length]) + 1; i < 27; i++)
                    {
                        if (_currentNode.value(numToChar(i)) != null)
                        {
                            _currentNode = _currentNode.value(numToChar(i));//TODO: Genera inconsistencia
                            _currentNode = MoveNextAux(_currentNode);
                        }
                    }
                }
                else
                {
                    _currentWord.Substring(0, _currentWord.Length - 1);//Elimina el último caracter
                    _currentNode = _currentNode.getParent();
                    for (int i = charToNum(_currentWord[_currentWord.Length]) + 1; i < 27; i++)
                    {
                        if (_currentNode.value(numToChar(i)) != null)
                        {
                            _currentNode = _currentNode.value(numToChar(i));//TODO: Genera inconsistencia
                            _currentNode = MoveNextAux(_currentNode);
                        }
                    }
                }
                return true;
            }
            else return false;
        }
	}

    private ITrieNode MoveNextAux(ITrieNode currentNode) {
        if (Convert.ToBoolean(currentNode.isTerminated()))
        {//Caso Base Recursivo
            return currentNode;
        }
        else {
            for (int i = 0; i < 27; i++) {
                char currentChar = numToChar(i);
                if (currentNode.value(currentChar) != null) {  //Si encuentra una letra
                    _currentWord += currentChar;               //Se añade la letra encontrada
                    return MoveNextAux(currentNode.value(currentChar));
                }
            }
            return null;
        }
        
    }

    private char numToChar(int i) {
        switch (i) {
            case 0:
                return 'a';
            case 1:
                return 'b';
            case 2:
                return 'c';
            case 3:
                return 'd';
            case 4:
                return 'e';
            case 5:
                return 'f';
            case 6:
                return 'g';
            case 7:
                return 'h';
            case 8:
                return 'i';
            case 9:
                return 'j';
            case 10:
                return 'k';
            case 11:
                return 'l';
            case 12:
                return 'm';
            case 13:
                return 'n';
            case 14:
                return 'ñ';
            case 15:
                return 'o';
            case 16:
                return 'p';
            case 17:
                return 'q';
            case 18:
                return 'r';
            case 19:
                return 's';
            case 20:
                return 't';
            case 21:
                return 'u';
            case 22:
                return 'v';
            case 23:
                return 'w';
            case 24:
                return 'x';
            case 25:
                return 'y';
            case 26:
                return 'z';
            default:
                return ' ';
        }
    }

    private int charToNum(char c)
    {
        switch (c)
        {
            case 'a':
                return 0;
            case 'b':
                return 1;
            case 'c':
                return 2;
            case 'd':
                return 3;
            case 'e':
                return 4;
            case 'f':
                return 5;
            case 'g':
                return 6;
            case 'h':
                return 7;
            case 'i':
                return 8;
            case 'j':
                return 9;
            case 'k':
                return 10;
            case 'l':
                return 11;
            case 'm':
                return 12;
            case 'n':
                return 13;
            case 'ñ':
                return 14;
            case 'o':
                return 15;
            case 'p':
                return 16;
            case 'q':
                return 17;
            case 'r':
                return 18;
            case 's':
                return 19;
            case 't':
                return 20;
            case 'u':
                return 21;
            case 'v':
                return 22;
            case 'w':
                return 23;
            case 'x':
                return 24;
            case 'y':
                return 25;
            case 'z':
                return 26;
            default:
                return 30;
        }
    }

}

