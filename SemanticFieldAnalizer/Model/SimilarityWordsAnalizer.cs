//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó mediante una herramienta.
//     Los cambios del archivo se perderán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

public class SimilarityWordsAnalizer : ISimilarityWordsAnalizer
{
	public double getSimilarityWeighing(string wordA, string wordB)
	{
        //Igualdad literal
        if (wordA.Equals(wordB)) return 1;

        double globalScore = 0;

        //Igualdad en las letras pero en desorden
        string wordATemp = wordA;
        string wordBTemp = wordB;
        int matchesCount = 0;
        foreach (char letter in wordATemp) {
            for (int i = 0; i < wordBTemp.Length; i++)
                if (letter == wordBTemp[i]) {
                    wordBTemp = wordBTemp.Remove(i, 1);
                    matchesCount++;
                }
        }
        double igualdadDesordenada = matchesCount / wordATemp.Length;
        globalScore = igualdadDesordenada;//TODO: CAMBIAR DESPUES

            /*
        //Cantidad de letras consecutivas coincidentes A en B
        //Desde substring de n-1 a 2
        //Se debe calcular las ponderaciones de cada substring
        //Proceso de extencion del B para hacer que el A quepa en B obligatoriamente
        wordATemp = wordA;
        wordBTemp = wordB;
        int extenciones = Convert.ToInt32(Math.Ceiling(Decimal.Divide(wordA.Length,wordB.Length)));
        for (int i = wordA.Length - 1; i > 1; i--) {

        }*/



        return globalScore;
		
	}

}

