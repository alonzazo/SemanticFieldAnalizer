//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó mediante una herramienta.
//     Los cambios del archivo se perderán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace SemanticFieldAnalizer {




public class SemanticFieldAnalizer
{
    private string targetText {
        get; set;
    }

    private string[] dictionaryText {
        get;set;
    }

	private Dictionary<string,double> _indexedByField
	{
		get;
		set;
	}
   
  

    /// <summary>
    /// Realiza un análisis del nivel de relación de un texto con campos semánticos específicos.
    /// </summary>
    /// <param name="targetPath">Dirección del texto por analizarse</param>
    /// <param name="semanticDictionaryPath">Dirección de diccionario de campos semánticos a usarse</param>
    public SemanticFieldAnalizer(string targetPath, string semanticDictionaryPath)
	{
        try {
            //Se carga el texto por analizar
            targetText = System.IO.File.ReadAllText(@targetPath);
            //Se carga el diccionario en formato csv a la memoria
            dictionaryText = System.IO.File.ReadAllLines(@semanticDictionaryPath);


            //------------------------------------------------------------PREPARACION DEL TEXTO

            //Se añaden las palabras que limpiarán el texto
            HashSet<string> superfluas = new HashSet<string>();
            superfluas.Add("a");
            superfluas.Add("ante");
            superfluas.Add("bajo");
            superfluas.Add("cabe");
            superfluas.Add("con");
            superfluas.Add("contra");
            superfluas.Add("de");
            superfluas.Add("durante");
            superfluas.Add("desde");
            superfluas.Add("en");
            superfluas.Add("entre");
            superfluas.Add("hacia");
            superfluas.Add("hasta");
            superfluas.Add("mediante");
            superfluas.Add("para");
            superfluas.Add("por");
            superfluas.Add("según");
            superfluas.Add("sin");
            superfluas.Add("so");
            superfluas.Add("sobre");
            superfluas.Add("tras");
            superfluas.Add("versus");
            superfluas.Add("vía");
            superfluas.Add("a");
            //Se limpia el texto
            IParagraphCleaner textCleaner = new ParagraphCleaner(superfluas);
            targetText = textCleaner.clean(targetPath);

            //Se crea el arbol de análisis
            ITrieDictionary textDictionary = TrieDictionaryFactory.getInstanceByParsing(targetText);

            //------------------------------------------------------------PREPARACION DEL DICCIONARIO
            /*FORMATO CSV
             * {clave1},{palabra1},{palabra2},{palabra3},...
             * {clave1},{palabra1},{palabra2},{palabra3},...
             
             */
            Dictionary<string, string[]> dictionary = new Dictionary<string, string[]>();
             foreach (string line in dictionaryText) {
                string[] lineSplitted = line.Split(',');
                string clave = lineSplitted[0];
                List<string> palabras = new List<string>();
                for (int i = 1; i < lineSplitted.Length; i++) palabras.Add(lineSplitted[i]);
                dictionary.Add(clave, palabras.ToArray());
                //Se inicializan las ponderaciones
                _indexedByField.Add(clave,0);
            }

            //----------------------------------------------------------PROCESO COMPARATIVO
            ISimilarityWordsAnalizer similarityAnalizer = new SimilarityWordsAnalizer();
            foreach (string word in textDictionary) {
                //En cada una de estas iteraciones se busca el nivel de relacion con cada campo semantico
                foreach (KeyValuePair<string, string[]> specificKey in dictionary) {
                    double score = 0;                                                                   //Se setea la puntuación
                    foreach (string wordInSemanticField in specificKey.Value) {
                        score += similarityAnalizer.getSimilarityWeighing(word, wordInSemanticField);   //Por cada palabra en el diccionario semántico se hace una evaluación
                    }
                    _indexedByField[specificKey.Key] += score;                                          //Se almacena la puntuación
                }
            }

            //-------------------------------------------------------PROCESO DE INDUCCIÓN DE CAMPO SEMÁNTICO
            //double puntuacionTotal = _indexedByField.Values.Sum();
            //double[] porcentajes = new double[_indexedByField.Count];                               //El análasis se hace relativo en lugar de absoluto trabajar sobre proporciones
            //int i = 0;
            /*foreach (KeyValuePair<string, double> ponderacion in _indexedByField) {
                porcentajes[i] = ponderacion.Value / puntuacionTotal;
                i++;
            }*/


        }
        catch (Exception ex) {
            throw ex;
        }
	}

	public double getIndexByKey(string key)
	{
        return _indexedByField[key];
	}

	public string getMainField()
	{
        double max = _indexedByField.Values.Max();
        string result = "";
        foreach (KeyValuePair<string, double> pair in _indexedByField)
            if (pair.Value == max) { result = pair.Key; break; }
        return result;
	}

	public string toString()
	{
        return _indexedByField.ToString() + "\n" + targetText.ToString() + "\n" + dictionaryText.ToString();

    }

}
}
